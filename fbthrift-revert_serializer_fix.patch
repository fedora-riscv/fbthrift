Revert "Fix crash in py3 serializer when using deserialize_from_header"

This reverts commit 1cf7dbaa5734aaba85561a9005436c231936e9dd

Without reverting this, fbthrift fails to compile:

```
/builddir/build/BUILD/fbthrift-2022.07.11.00/redhat-linux-build/thrift/lib/py3/cybld/thrift/py3/serializer.cpp: In function ‘PyObject* __pyx_pf_6thrift_3py3_10serializer_12deserialize_from_header(PyObject*, PyObject*, PyObject*)’:
/builddir/build/BUILD/fbthrift-2022.07.11.00/redhat-linux-build/thrift/lib/py3/cybld/thrift/py3/serializer.cpp:6806:22: error: use of deleted function ‘std::unique_ptr<_Tp, _Dp>& std::unique_ptr<_Tp, _Dp>::operator=(const std::unique_ptr<_Tp, _Dp>&) [with _Tp = folly::IOBuf; _Dp = std::default_delete<folly::IOBuf>]’
 6806 |       __pyx_v_cbuf = __pyx_t_9;
      |                      ^~~~~~~~~
In file included from /usr/include/c++/12/memory:76,
                 from /builddir/build/BUILD/fbthrift-2022.07.11.00/redhat-linux-build/thrift/lib/py3/cybld/thrift/py3/serializer.cpp:714:
/usr/include/c++/12/bits/unique_ptr.h:515:19: note: declared here
  515 |       unique_ptr& operator=(const unique_ptr&) = delete;
      |                   ^~~~~~~~
make[2]: *** [thrift/lib/py3/CMakeFiles/thrift-py3-serializer-py3.dir/build.make:83: thrift/lib/py3/CMakeFiles/thrift-py3-serializer-py3.dir/cybld/thrift/py3/serializer.cpp.o] Error 1
```
Index: b/thrift/lib/py3/serializer.pyx
===================================================================
--- a/thrift/lib/py3/serializer.pyx
+++ b/thrift/lib/py3/serializer.pyx
@@ -75,12 +75,6 @@ def deserialize_from_header(structKlass,
     cdef cTHeader header
     cdef F14NodeMap[string, string] pheaders
     cdef size_t needed = 0
-    cdef unique_ptr[cIOBuf] cbuf
-    try:
-        cbuf = header.removeHeader(&queue, needed, pheaders)
-    except Exception as e:
-        raise Error.__new__(Error, *e.args) from None
-    if cbuf == NULL:
-        raise BufferError("Bad data used for deserialize")
+    cbuf = header.removeHeader(&queue, needed, pheaders)
     protoid = Protocol(header.getProtocolId())
     return deserialize(structKlass, _fbthrift_iobuf.from_unique_ptr(_fbthrift_iobuf.move(cbuf)), protocol=protoid)
Index: b/thrift/lib/py3/test/serializer.py
===================================================================
--- a/thrift/lib/py3/test/serializer.py
+++ b/thrift/lib/py3/test/serializer.py
@@ -124,14 +124,6 @@ class SerializerTests(unittest.TestCase)
             deserialize(easy, b"\x05AAAAAAAA")
         with self.assertRaises(Error):
             deserialize(easy, b"\x02\xDE\xAD\xBE\xEF", protocol=Protocol.BINARY)
-        with self.assertRaises(BufferError):
-            deserialize_from_header(easy, b"\x02\xDE\xAD\xBE\xEF")
-        with self.assertRaises(Error):
-            control = easy(val=5, val_list=[4, 3, 2, 1])
-            buf = serialize_with_header(control, transform=Transform.ZSTD_TRANSFORM)
-            newBytes = bytearray(buf)
-            newBytes[4] += 1
-            deserialize_from_header(easy, bytes(newBytes))
 
     def thrift_serialization_round_robin(
         self, control: Struct, fixtures: Mapping[Protocol, bytes]
